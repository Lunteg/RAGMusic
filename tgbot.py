import pandas as pd
import numpy as np
from langchain.vectorstores import FAISS
import faiss
from sklearn.feature_extraction.text import TfidfVectorizer
from langchain_community.chat_models.gigachat import GigaChat
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from telegram.ext import CallbackQueryHandler
import os
import sqlite3


class MusicBot:
    user_history = {}

    def __init__(self):
        self.conn = sqlite3.connect("/app/data/data.db")
        self.cursor = self.conn.cursor()
        self.df = pd.read_sql_query("SELECT * FROM my_table", self.conn)

        # –ò–Ω–¥–µ–∫—Å—ã –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä—ã
        self.title_artist_vectorizer = TfidfVectorizer(max_features=5000)
        self.feature_vectorizer = None  # –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        self.title_artist_embeddings = self.create_title_artist_embeddings()
        self.feature_embeddings = self.create_feature_embeddings()

        # –°–æ–∑–¥–∞–Ω–∏–µ FAISS –∏–Ω–¥–µ–∫—Å–æ–≤
        self.title_artist_index = self.create_faiss_index(
            self.title_artist_embeddings)
        self.feature_index = self.create_faiss_index(self.feature_embeddings)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ GigaChat
        giga_key = os.environ.get("SB_AUTH_DATA")
        self.giga = GigaChat(
            credentials=giga_key, model="GigaChat", timeout=30, verify_ssl_certs=False)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram-–±–æ—Ç–∞
        bot_token = os.environ.get("TELEGRAM_API")
        app = ApplicationBuilder().token(bot_token).build()

        # –ö–æ–º–∞–Ω–¥–∞ /start
        app.add_handler(CommandHandler("start", self.start))
        # –ö–æ–º–∞–Ω–¥–∞ /help
        app.add_handler(CommandHandler("help", self.help_command))
        # –ö–æ–º–∞–Ω–¥–∞ /recommend
        app.add_handler(CommandHandler("recommend", self.recommend))
        # –ö–æ–º–∞–Ω–¥–∞ /history
        app.add_handler(CommandHandler("history", self.history))
        
        # –ü—Ä–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        app.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, self.find_track))
        app.add_handler(CallbackQueryHandler(self.track_selection_handler))

        app.run_polling(close_loop=False)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def add_to_history(self, user_id, track_name, track_id):

        self.cursor.execute(
            'INSERT INTO history (user_id, track_name, track_id) VALUES (?, ?, ?)', (user_id, track_name, track_id))
        self.conn.commit()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def get_user_history(self, user_id, returning_field='track_id'):
        if returning_field == 'track_id':
            self.cursor.execute(
                'SELECT track_id FROM history WHERE user_id = ?', (user_id,))
            rows = self.cursor.fetchall()
        elif returning_field == 'track_name':
            self.cursor.execute(
                'SELECT track_name FROM history WHERE user_id = ?', (user_id,))
            rows = self.cursor.fetchall()

        return [row[0] for row in rows]
    
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –º–µ–Ω—é –ø–æ–º–æ—â–∏\\n"
            "/recommend - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
        )
        await update.message.reply_text(help_text)
    
    def create_title_artist_embeddings(self):
        """–°–æ–∑–¥–∞—ë—Ç TF-IDF –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É."""
        data = (self.df["track_name"] + " " +
                self.df["artist_name"]).fillna("")
        embeddings = self.title_artist_vectorizer.fit_transform(data)
        return embeddings.toarray()

    def create_feature_embeddings(self):
        """–°–æ–∑–¥–∞—ë—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫."""
        feature_columns = [
            "lyrics", "genre", "dating", "violence", "shake the audience", "family/gospel",
            "romantic", "communication", "obscene", "music", "movement/places",
            "light/visual perceptions", "family/spiritual", "like/girls", "sadness",
            "feelings", "danceability", "loudness", "acousticness", "instrumentalness",
            "valence", "energy", "topic", "age"
        ]

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        features = self.df[feature_columns].fillna(
            "").astype(str).apply(" ".join, axis=1)

        self.feature_vectorizer = TfidfVectorizer(max_features=10000)
        embeddings = self.feature_vectorizer.fit_transform(features)
        return embeddings.toarray()

    def create_faiss_index(self, embeddings):
        """–°–æ–∑–¥–∞–µ—Ç FAISS –∏–Ω–¥–µ–∫—Å."""
        # –°–æ–∑–¥–∞–µ–º FAISS –∏–Ω–¥–µ–∫—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–æ–≤ L2
        index = faiss.IndexFlatL2(embeddings.shape[1])

        # –î–æ–±–∞–≤–ª—è–µ–º embeddings –≤ –∏–Ω–¥–µ–∫—Å
        # FAISS —Ç—Ä–µ–±—É–µ—Ç —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö float32
        embeddings = embeddings.astype(np.float32)
        index.add(embeddings)
        return index

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ç—Ä–µ–∫–æ–≤
    def search_by_title_and_artist(self, query, top_k=5):
        """–ò—â–µ—Ç —Ç—Ä–µ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–≤—Ç–æ—Ä—É."""
        query_vector = self.title_artist_vectorizer.transform(
            [query]).toarray().astype(np.float32)
        distances, indices = self.title_artist_index.search(
            query_vector, k=top_k)
        return self.df.iloc[indices[0]]
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
        """
        welcome_message = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MusicBot! üé∂\n\n"
            "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–±–∏—Ä–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –≤–∞—à–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.\n"
            "2Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /recommend –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏.\n"
            "3Ô∏è‚É£ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /history, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å! üöÄ"
        )
        await update.message.reply_text(welcome_message)
        
    # –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–µ—Å–Ω–∏
    async def find_track(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_input = update.message.text
        similar_tracks = self.search_by_title_and_artist(user_input, top_k=5)

        if similar_tracks.empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ –ø–µ—Å–Ω–∏.")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Å–Ω–∏
        buttons = [
            [
                InlineKeyboardButton(
                    f"{row['track_name']} - {row['artist_name']}",
                    callback_data=str(index),
                )
            ]
            for index, row in similar_tracks.iterrows()
        ]
        reply_markup = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Å–Ω—é –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=reply_markup
        )

    async def track_selection_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()

        track_id = int(query.data)
        track = self.df.iloc[track_id]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –∏—Å—Ç–æ—Ä–∏–∏
        user_id = query.from_user.id
        self.add_to_history(user_id, track["track_name"], track_id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ
        response = f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–µ—Å–Ω—é:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {track['track_name']}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {track['artist_name']}"
        await query.edit_message_text(text=response)

    async def history(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        listening_history = self.get_user_history(user_id, 'track_name')

        response = "–ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è:\n"
        await update.message.reply_text(response + '\n'.join(listening_history))

    def recommend_based_on_features(self, history_track_ids, top_k=10):
        """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç —Ç—Ä–µ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º—É–∑—ã–∫–∞–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫."""
        if not history_track_ids:
            return pd.DataFrame()

        # –ü–æ–ª—É—á–∞–µ–º —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–ª—è —Ç—Ä–µ–∫–æ–≤ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        history_embeddings = self.feature_embeddings[history_track_ids]
        user_profile_vector = np.mean(
            history_embeddings, axis=0).reshape(1, -1).astype(np.float32)

        # –ò—â–µ–º —Ç—Ä–µ–∫–∏, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        distances, indices = self.feature_index.search(user_profile_vector, k=top_k + len(history_track_ids))
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ç—Ä–µ–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        recommended_indices = [idx for idx in indices[0] if idx not in history_track_ids]
        
        # –£—Ä–µ–∑–∞–µ–º –¥–æ `top_k` –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        recommended_indices = recommended_indices[:top_k]
        
        return self.df.iloc[recommended_indices]
        
    async def recommend(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ –≤–∏–¥–µ –∏–Ω–¥–µ–∫—Å–æ–≤
        listening_history = self.get_user_history(user_id)

        if not listening_history:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.")
            return

        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
        similar_tracks = self.recommend_based_on_features(
            listening_history, top_k=5)

        if similar_tracks.empty:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç—Ä–µ–∫–∏.")
            return

        recommendations = self.generate_recommendations(
            similar_tracks.iterrows())
        await update.message.reply_text(recommendations)

    def generate_recommendations(self, similar_tracks):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ GigaChat."""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        structured_context = "\n\n".join(
            [
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {row['track_name']}\n"
                f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {row['artist_name']}\n"
                f"–ñ–∞–Ω—Ä: {row.get('genre', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"–¢–µ–∫—Å—Ç: {row['lyrics'][:500]}..."  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –ª–∏—Ä–∏–∫–∏
                for _, row in similar_tracks
            ]
        )
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        system_context = (
            f"–í—ã –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Å–µ–Ω."
            f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø–µ—Å–µ–Ω –ø–æ—Ö–æ–∂–∏—Ö –Ω–∞ —Ç–æ, —á—Ç–æ —Å–ª—É—à–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\n\n{structured_context}\n\n"
            f"–¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–º—É –ø–µ—Å–Ω–∏ –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ—á–µ–º—É."
            f"–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤, –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –∏ –∑–∞–∫–ª—é—á–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¢–û–õ–¨–ö–û —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫–æ–≤ —Å —Ç–≤–æ–∏–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏."
        )
        print(structured_context)

        response = self.giga.invoke(system_context)
        return response.content


if __name__ == '__main__':
    main = MusicBot()
